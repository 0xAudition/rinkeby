{"version":3,"sources":["constants.js","components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Events.jsx","components/Faucet.jsx","components/Header.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","img/chainlink.svg","components/FormModalRegister.jsx","views/Home.jsx","components/FormModalClaims.jsx","components/CreateClaims.jsx","components/FormModalContract.jsx","components/RegisterContract.jsx","components/CollapsibleTable.jsx","components/RegisterProject.jsx","views/Projects.jsx","views/ExampleUI.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","index.jsx","contracts/external_contracts.js"],"names":["INFURA_ID","BLOCKNATIVE_DAPPID","ALCHEMY_KEY","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","global","window","location","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","polygon","mumbai","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","moonbeam","moonriver","moonbaseAlpha","moonbeamDevNode","godwoken","NETWORK","n","Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","Balance","ethers","require","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","provider","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","utils","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","create","host","port","protocol","Blockie","isENS","endsWith","AddressInput","useState","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","onClick","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","cursor","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","useEffect","usdValue","parseFloat","toFixed","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","title","WalletOutlined","rotate","padding","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","reload","inputStyle","visible","float","paddingRight","dollarMultiplier","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","accountButtonInfo","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","cachedProvider","action","marginLeft","right","shape","className","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","icon","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","handleForm","returned","buttonIcon","defaultValue","bordered","height","args","baseType","stateMutability","overrides","noContractDisplay","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","Events","contractName","eventName","startBlock","events","useEventListener","paddingBottom","dataSource","renderItem","item","Item","blockNumber","sender","purpose","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","listAccounts","_faucetAddress","getFaucetAddress","Title","Header","link","subTitle","justifyContent","flexDirection","flex","alignItems","children","defaultProps","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","useBalance","faucetTx","useGasPrice","faucetHint","_network","formatEther","gap","transform","bgcolor","boxShadow","maxWidth","FormModalRegister","projectName","setProjectName","projectDesc","setProjectDesc","contractAddress","setContractAddress","contractVerified","setContractVerified","setContractName","checkDigitCount","preventDefault","addr","fetch","crossDomain","response","json","contractInfo","status","ContractName","Modal","onClose","handleClose","Box","sx","component","noValidate","TextField","label","variant","helperText","InputProps","readOnly","Button","writeContracts","ProjectRegistry","registerProject","update","gasUsed","gas","Home","readContracts","AppBar","Toolbar","noWrap","mr","letterSpacing","textDecoration","xs","md","Container","src","img","alt","FormModalClaims","setSelectContract","regContract","rowProps","registerContract","txtra","FormControl","InputLabel","labelId","MenuItem","slice","multiline","ClaimsRegistry","registerClaim","CreateClaims","createClaims","row","FormModalContract","setName","checkContractAddressDigit","RegisterContract","handleOpen","createData","sort","expand","funds","history","claim","insuranceDeposit","insuranceClaim","ProjectRow","projectInfo","useContractReader","projectClaims","projectDeposits","Row","React","TableRow","borderBottom","TableCell","scope","align","IconButton","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","gutterBottom","Table","TableHead","TableBody","contractRow","deposit","depositId","claimedAmount","claimId","contractId","metaData","depositAmount","historyRow","CollapsibleTable","projectCount","projectIds","Array","_","i","TableContainer","Paper","RegisterProject","Projects","ExampleUI","newPurpose","setNewPurpose","border","YourContract","setPurpose","balance","encodeFunctionData","SyncOutlined","spin","range","defaultChecked","percent","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","d","toISOString","deployWarning","purposes","columns","rowKey","fetcher","graphQLParams","subgraphUri","headers","then","docExplorerOpen","query","initialNetwork","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","selectedNetwork","useLocation","process","REACT_APP_PROVIDER","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useUserProviderAndSigner","yourMainnetBalance","deployedContracts","externalContracts","mainnetContracts","Web3Provider","code","reason","faucetAvailable","connection","useBurner","lte","exact","path","DAI","gutter","prevTheme","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","StyledEngineProvider","injectFirst","ApolloProvider","themeMap","defaultTheme","document","getElementById","module","exports","abi","internalType","anonymous","indexed","constant","outputs","UNI"],"mappings":"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OC,QAAU,CACf,EAAG,CACD5T,UAAW,CACT2S,IAAK,CACHpnB,QAAS,6CACTsoB,IA1jBO,CACb,CACEnW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,WACNmR,KAAM,YAGV4E,SAAS,EACTS,gBAAiB,aACjBrF,KAAM,eAER,CACEia,WAAW,EACXrW,OAAQ,CACN,CACEsW,SAAS,EACTF,aAAc,UACdnrB,KAAM,MACNmR,KAAM,WAER,CACEka,SAAS,EACTF,aAAc,UACdnrB,KAAM,MACNmR,KAAM,WAER,CACEka,SAAS,EACTF,aAAc,UACdnrB,KAAM,MACNmR,KAAM,YAGVnR,KAAM,WACNmR,KAAM,SAER,CACEia,WAAW,EACXrW,OAAQ,CACN,CACEsW,SAAS,EACTF,aAAc,SACdnrB,KAAM,MACNmR,KAAM,UAER,CACEka,SAAS,EACTF,aAAc,UACdnrB,KAAM,MACNmR,KAAM,WAER,CACEka,SAAS,EACTF,aAAc,UACdnrB,KAAM,OACNmR,KAAM,WAER,CACEka,SAAS,EACTF,aAAc,UACdnrB,KAAM,OACNmR,KAAM,WAER,CACEka,SAAS,EACTF,aAAc,QACdnrB,KAAM,OACNmR,KAAM,UAGVnR,KAAM,UACNmR,KAAM,SAER,CACEia,WAAW,EACXrW,OAAQ,CACN,CACEsW,SAAS,EACTF,aAAc,UACdnrB,KAAM,MACNmR,KAAM,WAER,CACEka,SAAS,EACTF,aAAc,UACdnrB,KAAM,MACNmR,KAAM,WAER,CACEka,SAAS,EACTF,aAAc,UACdnrB,KAAM,MACNmR,KAAM,YAGVnR,KAAM,WACNmR,KAAM,SAER,CACEma,UAAU,EACVvW,OAAQ,GACR/U,KAAM,mBACNurB,QAAS,CACP,CACEJ,aAAc,UACdnrB,KAAM,GACNmR,KAAM,YAGV4E,SAAS,EACTS,gBAAiB,OACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,GACR/U,KAAM,kBACNurB,QAAS,CACP,CACEJ,aAAc,UACdnrB,KAAM,GACNmR,KAAM,YAGV4E,SAAS,EACTS,gBAAiB,OACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,GACNmR,KAAM,WAER,CACEga,aAAc,UACdnrB,KAAM,GACNmR,KAAM,YAGVnR,KAAM,YACNurB,QAAS,CACP,CACEJ,aAAc,UACdnrB,KAAM,GACNmR,KAAM,YAGV4E,SAAS,EACTS,gBAAiB,OACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,MACNmR,KAAM,WAER,CACEga,aAAc,UACdnrB,KAAM,MACNmR,KAAM,YAGVnR,KAAM,UACNurB,QAAS,CACP,CACEJ,aAAc,OACdnrB,KAAM,GACNmR,KAAM,SAGV4E,SAAS,EACTS,gBAAiB,aACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,GACNmR,KAAM,YAGVnR,KAAM,YACNurB,QAAS,CACP,CACEJ,aAAc,UACdnrB,KAAM,GACNmR,KAAM,YAGV4E,SAAS,EACTS,gBAAiB,OACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,MACNmR,KAAM,WAER,CACEga,aAAc,UACdnrB,KAAM,MACNmR,KAAM,YAGVnR,KAAM,OACNurB,QAAS,GACTxV,SAAS,EACTS,gBAAiB,aACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,GACR/U,KAAM,WACNurB,QAAS,CACP,CACEJ,aAAc,QACdnrB,KAAM,GACNmR,KAAM,UAGV4E,SAAS,EACTS,gBAAiB,OACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,MACNmR,KAAM,YAGVnR,KAAM,OACNurB,QAAS,GACTxV,SAAS,EACTS,gBAAiB,aACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,MACNmR,KAAM,WAER,CACEga,aAAc,UACdnrB,KAAM,MACNmR,KAAM,YAGVnR,KAAM,OACNurB,QAAS,GACTxV,SAAS,EACTS,gBAAiB,aACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,MACNmR,KAAM,WAER,CACEga,aAAc,UACdnrB,KAAM,MACNmR,KAAM,WAER,CACEga,aAAc,UACdnrB,KAAM,MACNmR,KAAM,YAGVnR,KAAM,OACNurB,QAAS,GACTxV,SAAS,EACTS,gBAAiB,aACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,GACR/U,KAAM,OACNurB,QAAS,CACP,CACEJ,aAAc,SACdnrB,KAAM,GACNmR,KAAM,WAGV4E,SAAS,EACTS,gBAAiB,OACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,GACNmR,KAAM,YAGVnR,KAAM,SACNurB,QAAS,CACP,CACEJ,aAAc,UACdnrB,KAAM,GACNmR,KAAM,YAGV4E,SAAS,EACTS,gBAAiB,OACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,SACNmR,KAAM,WAER,CACEga,aAAc,UACdnrB,KAAM,UACNmR,KAAM,WAER,CACEga,aAAc,UACdnrB,KAAM,QACNmR,KAAM,WAER,CACEga,aAAc,UACdnrB,KAAM,SACNmR,KAAM,WAER,CACEga,aAAc,OACdnrB,KAAM,UACNmR,KAAM,QAER,CACEga,aAAc,QACdnrB,KAAM,IACNmR,KAAM,SAER,CACEga,aAAc,UACdnrB,KAAM,IACNmR,KAAM,WAER,CACEga,aAAc,UACdnrB,KAAM,IACNmR,KAAM,YAGVnR,KAAM,SACNurB,QAAS,GACTxV,SAAS,EACTS,gBAAiB,aACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,MACNmR,KAAM,WAER,CACEga,aAAc,UACdnrB,KAAM,MACNmR,KAAM,YAGVnR,KAAM,OACNurB,QAAS,GACTxV,SAAS,EACTS,gBAAiB,aACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACEoW,aAAc,UACdnrB,KAAM,MACNm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CE/U,KAAM,MACNmR,KAAM,WAER,CACEnR,KAAM,SACNmR,KAAM,YAGVnR,KAAM,WACNurB,QAAS,CACP,CACEvrB,KAAM,GACNmR,KAAM,SAGV4E,SAAS,EACTS,gBAAiB,aACjBrF,KAAM,YAER,CACEma,UAAU,EACVvW,OAAQ,CACN,CACE/U,KAAM,SACNmR,KAAM,WAER,CACEnR,KAAM,WACNmR,KAAM,YAGVnR,KAAM,YACNurB,QAAS,CACP,CACEvrB,KAAM,GACNmR,KAAM,YAGV4E,SAAS,EACTS,gBAAiB,OACjBrF,KAAM,YAER,CACE4E,SAAS,EACTS,gBAAiB,UACjBrF,KAAM,YAER,CACEia,WAAW,EACXrW,OAAQ,CACN,CACEsW,SAAS,EACTrrB,KAAM,QACNmR,KAAM,WAER,CACEka,SAAS,EACTrrB,KAAM,UACNmR,KAAM,WAER,CACEka,SAAS,EACTrrB,KAAM,QACNmR,KAAM,YAGVnR,KAAM,WACNmR,KAAM,SAER,CACEia,WAAW,EACXrW,OAAQ,CACN,CACEsW,SAAS,EACTrrB,KAAM,OACNmR,KAAM,WAER,CACEka,SAAS,EACTrrB,KAAM,KACNmR,KAAM,WAER,CACEka,SAAS,EACTrrB,KAAM,QACNmR,KAAM,YAGVnR,KAAM,WACNmR,KAAM,e","file":"static/js/main.af620d77.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\r\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\r\n\r\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\r\nexport const ETHERSCAN_KEY = \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\r\n\r\n// BLOCKNATIVE ID FOR Notify.js:\r\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\r\n\r\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  kovan: {\r\n    name: \"kovan\",\r\n    color: \"#7003DD\",\r\n    chainId: 42,\r\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://kovan.etherscan.io/\",\r\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\r\n  },\r\n  rinkeby: {\r\n    name: \"rinkeby\",\r\n    color: \"#e0d068\",\r\n    chainId: 4,\r\n    rpcUrl: `https://rinkeby.infura.io/v3/52978d65cfcd4cc7a96bda08ae9791aa`, \r\n    faucet: \"https://faucet.rinkeby.io/\",\r\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\r\n  },\r\n  ropsten: {\r\n    name: \"ropsten\",\r\n    color: \"#F60D09\",\r\n    chainId: 3,\r\n    faucet: \"https://faucet.ropsten.be/\",\r\n    blockExplorer: \"https://ropsten.etherscan.io/\",\r\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  xdai: {\r\n    name: \"xdai\",\r\n    color: \"#48a9a6\",\r\n    chainId: 100,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://dai.poa.network\",\r\n    faucet: \"https://xdai-faucet.top/\",\r\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\r\n  },\r\n  polygon: {\r\n    name: \"polygon\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://polygon-rpc.com/\",\r\n    blockExplorer: \"https://polygonscan.com/\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\r\n    faucet: \"https://faucet.polygon.technology/\",\r\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\r\n  },\r\n  localOptimismL1: {\r\n    name: \"localOptimismL1\",\r\n    color: \"#f01a37\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\r\n  },\r\n  localOptimism: {\r\n    name: \"localOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 420,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\r\n    gasPrice: 0,\r\n  },\r\n  kovanOptimism: {\r\n    name: \"kovanOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 69,\r\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\r\n    rpcUrl: `https://kovan.optimism.io`,\r\n    gasPrice: 0,\r\n  },\r\n  optimism: {\r\n    name: \"optimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 10,\r\n    blockExplorer: \"https://optimistic.etherscan.io/\",\r\n    rpcUrl: `https://mainnet.optimism.io`,\r\n  },\r\n  localAvalanche: {\r\n    name: \"localAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43112,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  fujiAvalanche: {\r\n    name: \"fujiAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43113,\r\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\r\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  mainnetAvalanche: {\r\n    name: \"mainnetAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43114,\r\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\r\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  testnetHarmony: {\r\n    name: \"testnetHarmony\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666700000,\r\n    blockExplorer: \"https://explorer.pops.one/\",\r\n    rpcUrl: `https://api.s0.b.hmny.io`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  mainnetHarmony: {\r\n    name: \"mainnetHarmony\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666600000,\r\n    blockExplorer: \"https://explorer.harmony.one/\",\r\n    rpcUrl: `https://api.harmony.one`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  fantom: {\r\n    name: \"fantom\",\r\n    color: \"#1969ff\",\r\n    chainId: 250,\r\n    blockExplorer: \"https://ftmscan.com/\",\r\n    rpcUrl: `https://rpcapi.fantom.network`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  testnetFantom: {\r\n    name: \"testnetFantom\",\r\n    color: \"#1969ff\",\r\n    chainId: 4002,\r\n    blockExplorer: \"https://testnet.ftmscan.com/\",\r\n    rpcUrl: `https://rpc.testnet.fantom.network`,\r\n    gasPrice: 1000000000,\r\n    faucet: \"https://faucet.fantom.network/\",\r\n  },\r\n  moonbeam: {\r\n    name: \"moonbeam\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1284,\r\n    blockExplorer: \"https://moonscan.io\",\r\n    rpcUrl: \"https://rpc.api.moonbeam.network\",\r\n  },\r\n  moonriver: {\r\n    name: \"moonriver\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1285,\r\n    blockExplorer: \"https://moonriver.moonscan.io/\",\r\n    rpcUrl: \"https://rpc.api.moonriver.moonbeam.network\",\r\n  },\r\n  moonbaseAlpha: {\r\n    name: \"moonbaseAlpha\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1287,\r\n    blockExplorer: \"https://moonbase.moonscan.io/\",\r\n    rpcUrl: \"https://rpc.api.moonbase.moonbeam.network\",\r\n    faucet: \"https://discord.gg/SZNP8bWHZq\",\r\n  },\r\n  moonbeamDevNode: {\r\n    name: \"moonbeamDevNode\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1281,\r\n    blockExplorer: \"https://moonbeam-explorer.netlify.app/\",\r\n    rpcUrl: \"http://127.0.0.1:9933\",\r\n  },\r\n  godwoken: {\r\n    name: \"godwoken\",\r\n    color: \"#000000\",\r\n    chainId: 71401,\r\n    blockExplorer: \"https://gw-explorer.nervosdao.community/\",\r\n    rpcUrl: \"https://godwoken-testnet-v1.ckbapp.dev\",\r\n    faucet: \"https://testnet.bridge.godwoken.io\",\r\n  },\r\n};\r\n\r\nexport const NETWORK = chainId => {\r\n  for (const n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n","import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\n\r\n// changed value={address} to address={address}\r\n\r\nconst { Text } = Typography;\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n**/\r\n\r\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\r\n\r\nexport default function Address(props) {\r\n  const { currentTheme } = useThemeSwitcher();\r\n  const address = props.value || props.address;\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n  const ensSplit = ens && ens.split(\".\");\r\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\r\n\r\n  if (validEnsCheck) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {props.onChange ? (\r\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n            <a\r\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n              target=\"_blank\"\r\n              href={etherscanLink}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {displayAddress}\r\n            </a>\r\n          </Text>\r\n        ) : (\r\n          <Text copyable={{ text: address }}>\r\n            <a\r\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n              target=\"_blank\"\r\n              href={etherscanLink}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {displayAddress}\r\n            </a>\r\n          </Text>\r\n        )}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","// import React, { useState } from \"react\";\r\n// import { useBalance } from \"eth-hooks\";\r\n\r\n// const { utils } = require(\"ethers\");\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n**/\r\n\r\nexport default function Balance(props) {\r\n  // const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  // const balance = useBalance(props.provider, props.address);\r\n  // let floatBalance = parseFloat(\"0.00\");\r\n  // let usingBalance = balance;\r\n\r\n  // if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\r\n  // if (typeof props.value !== \"undefined\") usingBalance = props.value;\r\n\r\n  // if (usingBalance) {\r\n  //   const etherBalance = utils.formatEther(usingBalance);\r\n  //   parseFloat(etherBalance).toFixed(2);\r\n  //   floatBalance = parseFloat(etherBalance);\r\n  // }\r\n\r\n  // let displayBalance = floatBalance.toFixed(4);\r\n\r\n  // const price = props.price || props.dollarMultiplier || 1;\r\n\r\n  // if (dollarMode) {\r\n  //   displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  // }\r\n\r\n  return (\r\n    <span\r\n    // style={{\r\n    //   verticalAlign: \"middle\",\r\n    //   fontSize: props.size ? props.size : 24,\r\n    //   padding: 8,\r\n    //   cursor: \"pointer\",\r\n    // }}\r\n    // onClick={() => {\r\n    //   setDollarMode(!dollarMode);\r\n    // }}\r\n    >\r\n      {/* {displayBalance} */}\r\n    </span>\r\n  );\r\n}\r\n","import { notification } from \"antd\";\r\nimport Notify from \"bnc-notify\";\r\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\nconst callbacks = {};\r\n\r\nconst DEBUG = true;\r\n\r\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\r\n  if (typeof providerOrSigner !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async (tx, callback) => {\r\n      let signer;\r\n      let network;\r\n      let provider;\r\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\r\n        provider = providerOrSigner.provider;\r\n        signer = providerOrSigner;\r\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\r\n      } else if (providerOrSigner._isProvider) {\r\n        provider = providerOrSigner;\r\n        signer = providerOrSigner.getSigner();\r\n        network = await providerOrSigner.getNetwork();\r\n      }\r\n\r\n      console.log(\"network\", network);\r\n      var options = null;\r\n      var notify = null;\r\n      options = {\r\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n        system: \"ethereum\",\r\n        networkId: network.chainId,\r\n        // darkMode: Boolean, // (default: false)\r\n        transactionHandler: txInformation => {\r\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\r\n          const possibleFunction = callbacks[txInformation.transaction.hash];\r\n          if (typeof possibleFunction === \"function\") {\r\n            possibleFunction(txInformation.transaction);\r\n          }\r\n        },\r\n      };\r\n\r\n      notify = Notify(options);\r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = ethers.utils.hexlify(120000);\r\n          }\r\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        if (DEBUG) console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        if (callback) {\r\n          callbacks[result.hash] = callback;\r\n        }\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Local Transaction Sent\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n          // on most networks BlockNative will update a transaction handler,\r\n          // but locally we will set an interval to listen...\r\n          if (callback) {\r\n            const txResult = await tx;\r\n            const listeningInterval = setInterval(async () => {\r\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\r\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\r\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\r\n                callback({ ...txResult, ...currentTransactionReceipt });\r\n                clearInterval(listeningInterval);\r\n              }\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n        if (typeof result.wait === \"function\") {\r\n          await result.wait();\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        if (DEBUG) console.log(e);\r\n        // Accounts for Metamask and default signer on all networks\r\n        let message =\r\n          e.data && e.data.message\r\n            ? e.data.message\r\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\r\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\r\n            : e.data\r\n            ? e.data\r\n            : JSON.stringify(e);\r\n        if (!e.error && e.message) {\r\n          message = e.message;\r\n        }\r\n\r\n        console.log(\"Attempt to clean up:\", message);\r\n        try {\r\n          let obj = JSON.parse(message);\r\n          if (obj && obj.body) {\r\n            let errorObj = JSON.parse(obj.body);\r\n            if (errorObj && errorObj.error && errorObj.error.message) {\r\n              message = errorObj.error.message;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          //ignore\r\n        }\r\n\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: message,\r\n        });\r\n        if (callback && typeof callback === \"function\") {\r\n          callback(e);\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import Portis from \"@portis/web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport Authereum from \"authereum\";\r\nimport Fortmatic from \"fortmatic\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3Modal from \"web3modal\";\r\nimport { ALCHEMY_KEY, INFURA_ID } from \"../constants\";\r\n\r\n// Coinbase walletLink init\r\nconst walletLink = new WalletLink({\r\n  appName: \"coinbase\",\r\n});\r\n\r\n// WalletLink provider\r\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\r\n\r\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\r\n/**\r\n  Web3 modal helps us \"connect\" external wallets:\r\n**/\r\nconst web3ModalSetup = () =>\r\n  new Web3Modal({\r\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\r\n    cacheProvider: true, // optional\r\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\r\n    providerOptions: {\r\n      walletconnect: {\r\n        package: WalletConnectProvider, // required\r\n        options: {\r\n          bridge: \"https://polygon.bridge.walletconnect.org\",\r\n          infuraId: INFURA_ID,\r\n          rpc: {\r\n            10: \"https://mainnet.optimism.io\", // xDai\r\n            100: \"https://rpc.gnosischain.com\", // xDai\r\n            137: \"https://polygon-rpc.com\",\r\n            31337: \"http://localhost:8545\",\r\n            42161: \"https://arb1.arbitrum.io/rpc\",\r\n            80001: \"https://rpc-mumbai.maticvigil.com\",\r\n            71401: \"https://godwoken-testnet-v1.ckbapp.dev\",\r\n          },\r\n        },\r\n      },\r\n      portis: {\r\n        display: {\r\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\r\n          name: \"Portis\",\r\n          description: \"Connect to Portis App\",\r\n        },\r\n        package: Portis,\r\n        options: {\r\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\r\n        },\r\n      },\r\n      fortmatic: {\r\n        package: Fortmatic, // required\r\n        options: {\r\n          key: \"pk_live_5A7C91B2FC585A17\", // required\r\n        },\r\n      },\r\n      // torus: {\r\n      //   package: Torus,\r\n      //   options: {\r\n      //     networkParams: {\r\n      //       host: \"https://localhost:8545\", // optional\r\n      //       chainId: 1337, // optional\r\n      //       networkId: 1337 // optional\r\n      //     },\r\n      //     config: {\r\n      //       buildEnv: \"development\" // optional\r\n      //     },\r\n      //   },\r\n      // },\r\n      \"custom-walletlink\": {\r\n        display: {\r\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\r\n          name: \"Coinbase\",\r\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\r\n        },\r\n        package: walletLinkProvider,\r\n        connector: async (provider, _options) => {\r\n          await provider.enable();\r\n          return provider;\r\n        },\r\n      },\r\n      authereum: {\r\n        package: Authereum, // required\r\n      },\r\n    },\r\n  });\r\n\r\nexport default web3ModalSetup;\r\n","import { create } from \"ipfs-http-client\";\r\nimport { BufferList } from \"bl\";\r\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\r\n\r\nexport async function addToIPFS(file) {\r\n  const fileAdded = await ipfs.add(file);\r\n\r\n  return fileAdded;\r\n}\r\n\r\nexport function urlFromCID(cid) {\r\n  return `https://ipfs.infura.io/ipfs/${cid}`;\r\n}\r\n\r\nexport async function getFromIPFS(hashToGet) {\r\n  for await (const file of ipfs.cat(hashToGet)) {\r\n    const content = new BufferList(file).toString();\r\n\r\n    return content;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import { Badge, Input } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nimport Blockie from \"./Blockie\";\r\n\r\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an address input with QR scan option\r\n\r\n  ~ How can I use? ~\r\n\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n**/\r\nexport default function AddressInput(props) {\r\n  const { ensProvider, onChange } = props;\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (isENS(address)) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scan ? (\r\n        <div\r\n          style={{\r\n            zIndex: 256,\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            width: \"100%\",\r\n          }}\r\n          onClick={() => {\r\n            setScan(false);\r\n          }}\r\n        >\r\n          <QrReader\r\n            delay={250}\r\n            resolution={1200}\r\n            onError={e => {\r\n              console.log(\"SCAN ERROR\", e);\r\n              setScan(false);\r\n            }}\r\n            onScan={newValue => {\r\n              if (newValue) {\r\n                console.log(\"SCAN VALUE\", newValue);\r\n                let possibleNewValue = newValue;\r\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\r\n                }\r\n                setScan(false);\r\n                updateAddress(possibleNewValue);\r\n              }\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\r\n        addonAfter={\r\n          <div\r\n            style={{ marginTop: 4, cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setScan(!scan);\r\n            }}\r\n          >\r\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n              <QrcodeOutlined style={{ fontSize: 18 }} />\r\n            </Badge>{\" \"}\r\n            Scan\r\n          </div>\r\n        }\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n**/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\r\n      value={display}\r\n      addonAfter={\r\n        !props.price ? (\r\n          \"\"\r\n        ) : (\r\n          <div\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              if (mode === \"USD\") {\r\n                setMode(\"ETH\");\r\n                setDisplay(currentValue);\r\n              } else {\r\n                setMode(\"USD\");\r\n                if (currentValue) {\r\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n                  setDisplay(usdValue);\r\n                } else {\r\n                  setDisplay(currentValue);\r\n                }\r\n              }\r\n            }}\r\n          >\r\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\r\n          </div>\r\n        )\r\n      }\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport QR from \"qrcode.react\";\r\n\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n**/\r\n\r\nexport default function Wallet(props) {\r\n  const [signerAddress, setSignerAddress] = useState();\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (props.signer) {\r\n        const newAddress = await props.signer.getAddress();\r\n        setSignerAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [props.signer]);\r\n\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const providerSend = props.provider ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: props.padding ? props.padding : 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: props.size ? props.size : 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          console.log(key);\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      display = (\r\n        <div>\r\n          <b>Private Key:</b>\r\n\r\n          <div>\r\n            <Text copyable>{pk}</Text>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <i>\r\n            Point your camera phone at qr code to open in\r\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\r\n              burner wallet\r\n            </a>\r\n            :\r\n          </i>\r\n          <QR\r\n            value={\"https://xdai.io/\" + pk}\r\n            size=\"450\"\r\n            level=\"H\"\r\n            includeMargin\r\n            renderAs=\"svg\"\r\n            imageSettings={{ excavate: false }}\r\n          />\r\n\r\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\r\n            {\"https://xdai.io/\" + pk}\r\n          </Paragraph>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton,\r\n          receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={!amount || !toAddress || qr}\r\n            loading={false}\r\n            onClick={() => {\r\n              const tx = Transactor(props.signer || props.provider);\r\n\r\n              let value;\r\n              try {\r\n                value = ethers.utils.parseEther(\"\" + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              tx({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n              setOpen(!open);\r\n              setQr();\r\n            }}\r\n          >\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport Wallet from \"./Wallet\";\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n    isContract={boolean}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n**/\r\n\r\nexport default function Account({\r\n  address,\r\n  userSigner,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n  isContract,\r\n}) {\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  let accountButtonInfo;\r\n  if (web3Modal?.cachedProvider) {\r\n    accountButtonInfo = { name: \"Logout\", action: logoutOfWeb3Modal };\r\n  } else {\r\n    accountButtonInfo = { name: \"Connect\", action: loadWeb3Modal };\r\n  }\r\n\r\n  const display = !minimized && (\r\n    <span>\r\n      {address && (\r\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={20} />\r\n      )}\r\n      <Balance address={address} provider={localProvider} price={price} size={20} />\r\n      {!isContract && (\r\n        <Wallet\r\n          address={address}\r\n          provider={localProvider}\r\n          signer={userSigner}\r\n          ensProvider={mainnetProvider}\r\n          price={price}\r\n          color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n          size={22}\r\n          padding={\"0px\"}\r\n        />\r\n      )}\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      {display}\r\n      {web3Modal && (\r\n        <Button\r\n          style={{ marginLeft: 8, position: \"fixed\", right: \"24px\" }}\r\n          shape=\"round\"\r\n          onClick={accountButtonInfo.action}\r\n          className=\"z-20 mt-3\"\r\n        >\r\n          {accountButtonInfo.name}\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n**/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n              /* in case user enters invalid bytes32 number,\r\n                   it considers it as string and converts to bytes32 */\r\n              const changedValue = utils.formatBytes32String(currentValue);\r\n              setDisplay(changedValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          } else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          // const ethValue = parseFloat(newValue) / props.price;\r\n          // setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Address from \"../Address\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\r\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\r\n  }\r\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\r\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\r\n    const displayable = JSON.stringify(thing.map(mostReadable));\r\n    return asText ? (\r\n      displayable\r\n    ) : (\r\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\r\n    );\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\r\n\r\nexport { tryToDisplay, tryToDisplayAsText };\r\n","import { Button, Col, Divider, Row } from \"antd\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { tryToDisplay } from \"./utils\";\r\n\r\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\r\n  const [variable, setVariable] = useState(\"\");\r\n\r\n  const refresh = useCallback(async () => {\r\n    try {\r\n      const funcResponse = await contractFunction();\r\n      setVariable(funcResponse);\r\n      triggerRefresh(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [setVariable, contractFunction, triggerRefresh]);\r\n\r\n  useEffect(() => {\r\n    refresh();\r\n  }, [refresh, refreshRequired, contractFunction]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={14}>\r\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\r\n        </Col>\r\n        <Col span={2}>\r\n          <h2>\r\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVariable;\r\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\nimport { Transactor } from \"../../helpers\";\r\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\r\n\r\nconst { utils, BigNumber } = require(\"ethers\");\r\n\r\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\r\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\r\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\r\n};\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\r\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const handleForm = returned => {\r\n    if (returned) {\r\n      setForm({});\r\n    }\r\n  };\r\n\r\n  const buttonIcon =\r\n    functionInfo.type === \"call\" ? (\r\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n    );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              const args = functionInfo.inputs.map((input, inputIndex) => {\r\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n                let value = form[key];\r\n                if (input.baseType === \"array\") {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                try {\r\n                  const returned = await contractFunction(...args);\r\n                  handleForm(returned);\r\n                  result = tryToDisplayAsText(returned);\r\n                } catch (err) {\r\n                  console.error(err);\r\n                }\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (gasPrice) {\r\n                  overrides.gasPrice = gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                handleForm(returned);\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import { Card } from \"antd\";\r\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport Address from \"../Address\";\r\nimport Balance from \"../Balance\";\r\nimport DisplayVariable from \"./DisplayVariable\";\r\nimport FunctionForm from \"./FunctionForm\";\r\n\r\nconst noContractDisplay = (\r\n  <div>\r\n    Loading...{\" \"}\r\n    <div style={{ padding: 32 }}>\r\n      You need to run{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run chain\r\n      </span>{\" \"}\r\n      and{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      to see your contract here.\r\n    </div>\r\n    <div style={{ padding: 32 }}>\r\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\r\n        ☢️\r\n      </span>\r\n      Warning: You might need to run\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      <i>again</i> after the frontend comes up!\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\r\n\r\nexport default function Contract({\r\n  customContract,\r\n  account,\r\n  gasPrice,\r\n  signer,\r\n  provider,\r\n  name,\r\n  show,\r\n  price,\r\n  blockExplorer,\r\n  chainId,\r\n  contractConfig,\r\n}) {\r\n  const contracts = useContractLoader(provider, contractConfig, chainId);\r\n  let contract;\r\n  if (!customContract) {\r\n    contract = contracts ? contracts[name] : \"\";\r\n  } else {\r\n    contract = customContract;\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\r\n\r\n  const displayedContractFunctions = useMemo(() => {\r\n    const results = contract\r\n      ? Object.entries(contract.interface.functions).filter(\r\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\r\n        )\r\n      : [];\r\n    return results;\r\n  }, [contract, show]);\r\n\r\n  const [refreshRequired, triggerRefresh] = useState(false);\r\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\r\n    const contractFunc =\r\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\r\n        ? contract[contractFuncInfo[0]]\r\n        : contract.connect(signer)[contractFuncInfo[0]];\r\n\r\n    if (typeof contractFunc === \"function\") {\r\n      if (isQueryable(contractFuncInfo[1])) {\r\n        // If there are no inputs, just display return value\r\n        return (\r\n          <DisplayVariable\r\n            key={contractFuncInfo[1].name}\r\n            contractFunction={contractFunc}\r\n            functionInfo={contractFuncInfo[1]}\r\n            refreshRequired={refreshRequired}\r\n            triggerRefresh={triggerRefresh}\r\n            blockExplorer={blockExplorer}\r\n          />\r\n        );\r\n      }\r\n\r\n      // If there are inputs, display a form to allow users to provide these\r\n      return (\r\n        <FunctionForm\r\n          key={\"FF\" + contractFuncInfo[0]}\r\n          contractFunction={contractFunc}\r\n          functionInfo={contractFuncInfo[1]}\r\n          provider={provider}\r\n          gasPrice={gasPrice}\r\n          triggerRefresh={triggerRefresh}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div style={{ fontSize: 24 }}>\r\n            {name}\r\n            <div style={{ float: \"right\" }}>\r\n              <Address value={address} blockExplorer={blockExplorer} />\r\n              <Balance address={address} provider={provider} price={price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={contractDisplay && contractDisplay.length <= 0}\r\n      >\r\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { List } from \"antd\";\r\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\r\nimport Address from \"./Address\";\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a lists of events\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Events\r\n    contracts={readContracts}\r\n    contractName=\"YourContract\"\r\n    eventName=\"SetPurpose\"\r\n    localProvider={localProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    startBlock={1}\r\n  />\r\n**/\r\n\r\nexport default function Events({ contracts, contractName, eventName, localProvider, mainnetProvider, startBlock }) {\r\n  // 📟 Listen for broadcast events\r\n  const events = useEventListener(contracts, contractName, eventName, localProvider, startBlock);\r\n\r\n  return (\r\n    <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\r\n      <h2>Events:</h2>\r\n      <List\r\n        bordered\r\n        dataSource={events}\r\n        renderItem={item => {\r\n          return (\r\n            <List.Item key={item.blockNumber + \"_\" + item.args.sender + \"_\" + item.args.purpose}>\r\n              <Address address={item.args[0]} ensProvider={mainnetProvider} fontSize={16} />\r\n              {item.args[1]}\r\n            </List.Item>\r\n          );\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Input, Tooltip } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n**/\r\n\r\nexport default function Faucet(props) {\r\n  const [address, setAddress] = useState();\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  const { price, placeholder, localProvider, ensProvider } = props;\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (localProvider) {\r\n        const _faucetAddress = await localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [localProvider]);\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const updateAddress = newValue => {\r\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\r\n      setAddress(newValue);\r\n    }\r\n  };\r\n\r\n  const tx = Transactor(localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={placeholder ? placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        value={address}\r\n        onChange={e => updateAddress(e.target.value)}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: utils.parseEther(\"0.01\"),\r\n                });\r\n                setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              provider={localProvider}\r\n              ensProvider={ensProvider}\r\n              price={price}\r\n              address={faucetAddress}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Typography } from \"antd\";\r\n\r\nconst { Title, Text } = Typography;\r\n\r\n// displays a page header\r\n\r\nexport default function Header({ link, title, subTitle, ...props }) {\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", padding: \"1.2rem\" }}>\r\n      <div style={{ display: \"flex\", flexDirection: \"column\", flex: 1, alignItems: \"start\" }}>\r\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <Title level={4} style={{ margin: \"0 0.5rem 0 0\" }}>\r\n            {title}\r\n          </Title>\r\n        </a>\r\n        <Text type=\"secondary\" style={{ textAlign: \"left\" }}>\r\n          {subTitle}\r\n        </Text>\r\n      </div>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  // link: \"https://github.com/austintgriffith/scaffold-eth\",\r\n  title: \"\",\r\n  subTitle: \"\",\r\n};\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst createProvider = async url => {\r\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\r\n\r\n  await p.ready;\r\n\r\n  return p;\r\n};\r\n\r\nexport default function useStaticJsonRPC(urlArray) {\r\n  const [provider, setProvider] = useState(null);\r\n\r\n  const handleProviders = useCallback(async () => {\r\n    try {\r\n      const p = await Promise.race(urlArray.map(createProvider));\r\n      const _p = await p;\r\n\r\n      setProvider(_p);\r\n    } catch (error) {\r\n      // todo: show notification error about provider issues\r\n      console.log(error);\r\n    }\r\n  }, [urlArray]);\r\n\r\n  useEffect(() => {\r\n    handleProviders();\r\n    // eslint-disable-next-line\r\n  }, [JSON.stringify(urlArray)]);\r\n\r\n  return provider;\r\n}\r\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import {\r\n  Button,\r\n  Card,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  InputNumber,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip,\r\n  Typography,\r\n} from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\r\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\n\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  }\r\n  console.log(\"no call of that name!\");\r\n  return undefined;\r\n};\r\n\r\nconst defaultToken = \"ETH\";\r\nconst defaultTokenOut = \"DAI\";\r\nconst defaultSlippage = \"0.5\";\r\nconst defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n  const [tokens, setTokens] = useState();\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  const signer = selectedProvider.getSigner();\r\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\r\n\r\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      console.log(_tokenListUri);\r\n      try {\r\n        const tokenListResponse = await fetch(_tokenListUri);\r\n        const tokenListJson = await tokenListResponse.json();\r\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        const ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        const _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        const _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListURI, _tokenListUri, activeChainId]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      const baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      const listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n    // eslint-disable-next-line\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      const accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  const route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item.symbol;\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    const approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    const approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    const approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    const removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      const metadata = {};\r\n\r\n      let call;\r\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      const path = trades[0].route.path.map(function (item) {\r\n        return item.address;\r\n      });\r\n      console.log(path);\r\n      const accountList = await selectedProvider.listAccounts();\r\n      const address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata.value = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        const _amountOut = ethers.utils.hexlify(\r\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\r\n        );\r\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata.value = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      const result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  const insufficientBalance = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const inputIsToken = tokenIn !== \"ETH\";\r\n  const insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const formattedBalanceIn = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  const formattedBalanceOut = balanceOut\r\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  const metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  const metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  const priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  const priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  const swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size=\"large\"\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size=\"large\"\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            <InputNumber\r\n              defaultValue={defaultSlippage}\r\n              min={0}\r\n              max={100}\r\n              precision={2}\r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace(\"%\", \"\")}\r\n              onChange={value => {\r\n                console.log(value);\r\n\r\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                setSlippageTolerance(slippagePercent);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            <InputNumber\r\n              min={0}\r\n              max={3600}\r\n              defaultValue={defaultTimeLimit}\r\n              onChange={value => {\r\n                console.log(value);\r\n                setTimeLimit(value);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import { Switch } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\r\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = isChecked => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\r\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import { Timeline, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","import { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { utils, ethers } from \"ethers\";\r\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\r\n\r\nimport { NETWORKS } from \"../constants\";\r\nimport { Transactor } from \"../helpers\";\r\n\r\n/** \r\nThis is a component for bridging between L1 & L2\r\nCurrently it supports Testnet deposits for Arbitrum & Optimism\r\n\r\n __          _______ _____\r\n \\ \\        / /_   _|  __ \\\r\n  \\ \\  /\\  / /  | | | |__) |\r\n   \\ \\/  \\/ /   | | |  ___/\r\n    \\  /\\  /   _| |_| |\r\n     \\/  \\/   |_____|_|\r\n\r\n\r\n**/\r\n\r\nexport default function L2ArbitrumBridge({ address, userSigner }) {\r\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\r\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\r\n  const [L1Provider, setL1Provider] = useState(\"\");\r\n  const [L2Provider, setL2Provider] = useState(\"\");\r\n  const [rollup, setRollup] = useState(\"arbitrum\");\r\n  const [environment] = useState(\"test\");\r\n\r\n  const rollupConfig = {\r\n    arbitrum: {\r\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\r\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\r\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\r\n    },\r\n    optimism: {\r\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\r\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\r\n    },\r\n  };\r\n\r\n  const activeConfig = rollupConfig[rollup][environment];\r\n\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  const tx = Transactor(userSigner);\r\n\r\n  useEffect(() => {\r\n    async function setProviders() {\r\n      const L1 = activeConfig.L1;\r\n      const L2 = activeConfig.L2;\r\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\r\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\r\n      setL1EthBalance(\"...\");\r\n      setL2EthBalance(\"...\");\r\n    }\r\n    setProviders();\r\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\r\n\r\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\r\n\r\n  useOnBlock(L1Provider, async () => {\r\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\r\n    const yourL1Balance = await L1Provider.getBalance(address);\r\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\r\n    const yourL2Balance = await L2Provider.getBalance(address);\r\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\r\n  });\r\n\r\n  const { Option } = Select;\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 12,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"token\",\r\n      key: \"token\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} L1 Balance`,\r\n      dataIndex: \"l1\",\r\n      key: \"l1\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\r\n      dataIndex: \"l2\",\r\n      key: \"l2\",\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: \"1\",\r\n      token: \"ETH\",\r\n      l1: \"Ξ\" + L1EthBalance,\r\n      l2: \"Ξ\" + L2EthBalance,\r\n    },\r\n  ];\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onAssetChange = value => {\r\n    console.log(value);\r\n  };\r\n\r\n  async function onFinish(values) {\r\n    console.log(contracts);\r\n    console.log(values.amount.toString());\r\n    console.log(rollup);\r\n    let newTx;\r\n    try {\r\n      if (rollup === \"arbitrum\") {\r\n        newTx = await tx(\r\n          contracts.Inbox.depositEth(1_300_000, {\r\n            value: utils.parseEther(values.amount.toString()),\r\n            gasLimit: 300000,\r\n          }),\r\n        );\r\n      } else if (rollup === \"optimism\") {\r\n        newTx = await tx(\r\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\r\n            value: utils.parseEther(values.amount.toString()),\r\n          }),\r\n        );\r\n      }\r\n      await newTx.wait();\r\n      console.log(\"woop!\");\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.log(\"something went wrong!\");\r\n    }\r\n  }\r\n\r\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\r\n\r\n  return (\r\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\r\n        <Radio.Group\r\n          value={rollup}\r\n          onChange={e => {\r\n            setRollup(e.target.value);\r\n          }}\r\n          style={{ marginBottom: 10 }}\r\n        >\r\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\r\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\r\n        </Radio.Group>\r\n\r\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\r\n\r\n        <Form\r\n          {...formItemLayout}\r\n          form={form}\r\n          name=\"control-hooks\"\r\n          onFinish={onFinish}\r\n          initialValues={{ assetType: \"eth\" }}\r\n        >\r\n          <Form.Item\r\n            name=\"assetType\"\r\n            label=\"Select Asset Type\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\r\n              <Option value=\"eth\">ETH</Option>\r\n              <Option disabled value=\"erc20\">\r\n                ERC-20\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item name=\"address\" label=\"Address\">\r\n            <Input disabled placeholder={address} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"amount\"\r\n            label=\"Amount to bridge\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\r\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\r\nconst ArbitrumInboxABI = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\r\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"InboxMessageDelivered\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\r\n    name: \"InboxMessageDeliveredFromOrigin\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"WhitelistSourceUpdated\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"bridge\",\r\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\r\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"createRetryableTicket\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\r\n    name: \"depositEth\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\r\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\r\n    ],\r\n    name: \"initialize\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"isMaster\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2Message\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2MessageFromOrigin\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"updateWhitelistSource\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"whitelist\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\r\nconst OVM_L1StandardBridgeABI = [\r\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\r\n];\r\n\r\nconst L1BridgeMetadata = {\r\n  // Arbitrium Contract's\r\n  44010: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  4: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  // Optimism Contract's\r\n  31337: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n  42: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { Alert, Button } from \"antd\";\r\nimport React from \"react\";\r\n\r\nimport { NETWORK } from \"../constants\";\r\n\r\nfunction NetworkDisplay({\r\n  NETWORKCHECK,\r\n  localChainId,\r\n  selectedChainId,\r\n  targetNetwork,\r\n  USE_NETWORK_SELECTOR,\r\n  logoutOfWeb3Modal,\r\n}) {\r\n  let networkDisplay = \"\";\r\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\r\n    const networkSelected = NETWORK(selectedChainId);\r\n    const networkLocal = NETWORK(localChainId);\r\n    if (selectedChainId === 1337 && localChainId === 31337) {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network ID\"\r\n            description={\r\n              <div>\r\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\r\n                HardHat.\r\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network\"\r\n            description={\r\n              <div>\r\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\r\n                <Button\r\n                  onClick={async () => {\r\n                    const ethereum = window.ethereum;\r\n                    const data = [\r\n                      {\r\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\r\n                        chainName: targetNetwork.name,\r\n                        nativeCurrency: targetNetwork.nativeCurrency,\r\n                        rpcUrls: [targetNetwork.rpcUrl],\r\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\r\n                      },\r\n                    ];\r\n                    console.log(\"data\", data);\r\n\r\n                    let switchTx;\r\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\r\n                    try {\r\n                      switchTx = await ethereum.request({\r\n                        method: \"wallet_switchEthereumChain\",\r\n                        params: [{ chainId: data[0].chainId }],\r\n                      });\r\n                    } catch (switchError) {\r\n                      // not checking specific error code, because maybe we're not using MetaMask\r\n                      try {\r\n                        switchTx = await ethereum.request({\r\n                          method: \"wallet_addEthereumChain\",\r\n                          params: data,\r\n                        });\r\n                      } catch (addError) {\r\n                        // handle \"add\" error\r\n                      }\r\n                    }\r\n\r\n                    if (switchTx) {\r\n                      console.log(switchTx);\r\n                    }\r\n                  }}\r\n                >\r\n                  <b>{networkLocal && networkLocal.name}</b>\r\n                </Button>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\r\n      <div style={{ zIndex: -1, position: \"absolute\", right: 150, top: 25, padding: 16, color: targetNetwork.color }}>\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  console.log({ networkDisplay });\r\n\r\n  return networkDisplay;\r\n}\r\n\r\nexport default NetworkDisplay;\r\n","import { Button } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useBalance, useGasPrice } from \"eth-hooks\";\r\n\r\nimport { Transactor } from \"../helpers\";\r\n\r\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\r\n  const [faucetClicked, setFaucetClicked] = useState(false);\r\n\r\n  // fetch local balance\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  // get gas Price from network\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  let faucetHint = \"\";\r\n\r\n  if (\r\n    !faucetClicked &&\r\n    localProvider &&\r\n    localProvider._network &&\r\n    localProvider._network.chainId === 31337 &&\r\n    yourLocalBalance &&\r\n    ethers.utils.formatEther(yourLocalBalance) <= 0\r\n  ) {\r\n    faucetHint = (\r\n      <div style={{ position: \"absolute\", right: 65, top: 65 }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            faucetTx({\r\n              to: address,\r\n              value: ethers.utils.parseEther(\"0.01\"),\r\n            });\r\n            setFaucetClicked(true);\r\n          }}\r\n        >\r\n          💰 Grab funds from the faucet ⛽️\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return faucetHint;\r\n}\r\n\r\nexport default FaucetHint;\r\n","export default __webpack_public_path__ + \"static/media/chainlink.80875033.svg\";","/* eslint-disable prettier/prettier */\r\nimport { Modal, Button, Box, TextField } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  useContractReader,\r\n} from \"eth-hooks\";\r\n\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  gap: \"20px\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  height: \"auto\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: \"2px 2px 24px black\",\r\n  borderRadius: \"10px\",\r\n  p: 3,\r\n  maxWidth: \"850px\",\r\n};\r\n\r\nexport default function FormModalRegister(props) {\r\n  // const [address, setAddress] = useState(\"\");\r\n\r\n  const [projectName, setProjectName] = useState(\"\");\r\n  const [projectDesc, setProjectDesc] = useState(\"\");\r\n  const [contractAddress, setContractAddress] = useState(\"\");\r\n  const [contractVerified, setContractVerified] = useState(false);\r\n  const [contractName, setContractName] = useState(\"\");\r\n\r\n\r\n  const checkDigitCount = async (e) => {\r\n    e.preventDefault();\r\n    setContractAddress(e.target.value);\r\n    let addr = e.target.value;\r\n    console.log({addr});\r\n    if(addr && addr.length == 42) {\r\n      // get contract details\r\n      let url = `https://api-rinkeby.etherscan.io/api?module=contract&action=getsourcecode&address=${addr}&apikey=BC8WVS441425IDXZI1ZUDGT7XTCQAUYJGW`;\r\n      \r\n      let response = await fetch(url, {\r\n        crossDomain:true,\r\n      });\r\n      let contractInfo =  await response.json();\r\n      if(contractInfo.status == '1') {\r\n        setContractVerified(true);\r\n        if(contractInfo.result && contractInfo.result.length > 0) {\r\n          setContractName(contractInfo.result[0].ContractName);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        open={props.open}\r\n        onClose={props.handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className=\"w-10/12\" sx={style} component=\"form\" noValidate>\r\n          {/* Register Project Form */}\r\n          <TextField\r\n            id=\"outlined-projectName-input\"\r\n            className=\"w-3/4\"\r\n            label={\"Project Name\"}\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            onChange={e => {\r\n              setProjectName(e.target.value);\r\n            }}\r\n          />\r\n          <TextField\r\n            id=\"outlined-description-input\"\r\n            className=\"w-3/4\"\r\n            label=\"Project Description\"\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            onChange={e => {\r\n              setProjectDesc(e.target.value);\r\n            }}\r\n          />\r\n          {contractAddress.length > 25 ? (\r\n            <TextField\r\n              id=\"outlined-contractAddress-input\"\r\n              className=\"w-3/4\"\r\n              label=\"Contract Address\"\r\n              type=\"text\"\r\n              variant=\"outlined\"\r\n              value={contractAddress}\r\n              onChange={checkDigitCount}\r\n            />\r\n          ) : (\r\n            <TextField\r\n              color=\"secondary\"\r\n              helperText=\"Please ensure the contract address is correct before submission\"\r\n              id=\"outlined-contractAddress-input\"\r\n              className=\"w-3/4\"\r\n              label=\"Contract Address\"\r\n              value={contractAddress}\r\n              onChange={checkDigitCount}\r\n            />\r\n          )}\r\n          {/* read only section - THIS NEEDS CONNECTION TO THE NAME OF THE CONTRACT & CONTRACT SOURCE */}\r\n\r\n          <TextField\r\n            id=\"contractName-verified\"\r\n            label=\"Contract Validated\"\r\n            className=\"w-3/4\"\r\n            value={contractVerified}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n            variant=\"standard\"\r\n          />\r\n\r\n          <TextField\r\n            id=\"contractName-read-only-input\"\r\n            label=\"Contract Name\"\r\n            className=\"w-3/4\"\r\n            value={contractName}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n            variant=\"standard\"\r\n          />\r\n          <TextField\r\n            id=\"contractURI-standard-read-only-input\"\r\n            label=\"Contract Source ?\"\r\n            className=\"w-3/4\"\r\n            value={\"x0x00x00\"}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n            variant=\"standard\"\r\n          />\r\n          <Button variant=\"outlined\"\r\n            style={{ marginTop: 8 }}\r\n            onClick={async () => {\r\n              /* look how you call setPurpose on your contract: */\r\n              /* notice how you pass a call back for tx updates too */\r\n              // ProjectRegistry.registerProject(\"TombFork\", \"tombfork.io\", \"Boardroom\", \"ipfs://forkboardroom\", \"0xBd696eA529180b32e8c67F1888ed51Ac071cb56F\");\r\n              // TODO Contract Source\r\n              console.log(props)\r\n              const result = props.tx(props.writeContracts.ProjectRegistry.registerProject(projectName, projectDesc, contractName, '', contractAddress), update => {\r\n                console.log(\"📡 Transaction Update:\", update);\r\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\r\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\r\n                  console.log(\r\n                    \" ⛽️ \" +\r\n                      update.gasUsed +\r\n                      \"/\" +\r\n                      (update.gasLimit || update.gas) +\r\n                      \" @ \" +\r\n                      parseFloat(update.gasPrice) / 1000000000 +\r\n                      \" gwei\",\r\n                  );\r\n                }\r\n              });\r\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\r\n              console.log(await result);\r\n            }}\r\n          >\r\n            Register Project!\r\n          </Button>\r\n\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport { AppBar, Toolbar, Typography, Button, Container } from \"@mui/material\";\r\nimport img from \"./../img/chainlink.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport FormModalRegister from \"../components/FormModalRegister\";\r\n\r\nexport default function Home({\r\n  address,\r\n  mainnetProvider,\r\n  localProvider,\r\n  yourLocalBalance,\r\n  price,\r\n  tx,\r\n  readContracts,\r\n  writeContracts,\r\n}) {\r\n  const [open, setOpen] = useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  return (\r\n    <>\r\n      <AppBar className=\"shadow-none gradient-bg py-4 z-10\">\r\n        <Toolbar>\r\n          <Typography\r\n            variant=\"h4\"\r\n            noWrap\r\n            component=\"a\"\r\n            href=\"/\"\r\n            sx={{\r\n              mr: 2,\r\n              display: \"flex\",\r\n              letterSpacing: \"0.3rem\",\r\n              textDecoration: \"none\",\r\n              fontSize: { xs: \"1.2rem\", md: \"2rem\" },\r\n              color: \"#fff\",\r\n            }}\r\n          >\r\n            Audition\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* Hero Section */}\r\n      <div className=\"w-full h-[100%]\">        \r\n        <Container className=\"w-[80%] h-full mt-20 max-w-screen-lg\">                     \r\n          <img src={`${img}`} alt=\"chainlink\" className=\"w-full\"/>    \r\n          <Container className=\"mt-8 lg:mt-16\">\r\n            <Typography className=\"pt-8 font-bold text-blue-900 text-2xl md:text-3xl lg:text-5xl text-gradient\">Total Prizes locked</Typography>\r\n            <Typography className=\"pt-8 font-medium text-xl md:text-2xl lg:text-4xl\">7,777,777 AUDN</Typography>\r\n          </Container>  \r\n          <Container className=\"mt-8 lg:mt-16\">\r\n            <Typography className=\"pt-8 font-bold text-blue-900 text-2xl md:text-3xl lg:text-5xl text-gradient\">Total Prizes/amount earned</Typography>\r\n            <Typography className=\"pt-8 font-medium text-xl md:text-2xl lg:text-4xl\">250,000 AUDN</Typography> \r\n          </Container>\r\n        </Container>        \r\n      </div>\r\n      <footer className=\"my-20 flex justify-center gap-4\">\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={handleOpen}\r\n        >\r\n          Register A Project\r\n        </Button>\r\n        <FormModalRegister\r\n          open={open}\r\n          handleClose={handleClose}\r\n          registerProject={true}\r\n          address={address}\r\n            mainnetProvider={mainnetProvider}\r\n            localProvider={localProvider}\r\n            yourLocalBalance={yourLocalBalance}\r\n            price={price}\r\n            tx={tx}\r\n            writeContracts={writeContracts}\r\n            readContracts={readContracts}\r\n        />\r\n        <Link to=\"/projects\">\r\n            <Button variant=\"contained\" className=\"bg-blue-500\">Find Bounties</Button>\r\n        </Link>\r\n      </footer>\r\n     \r\n    </>\r\n  );\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Box,\r\n  TextField,\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  InputLabel,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  gap: \"20px\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  height: \"auto\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: \"2px 2px 24px black\",\r\n  borderRadius: \"10px\",\r\n  p: 3,\r\n  maxWidth: \"850px\",\r\n};\r\n\r\nexport default function FormModalClaims(props) {\r\n  const [selectContract, setSelectContract] = useState(\"\");\r\n  const regContract = props.rowProps.registerContract;\r\n  console.log(props);\r\n  if (!regContract) return null;\r\n\r\n  const handleSelectChange = (e) => {\r\n    setSelectContract(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        open={props.open}\r\n        onClose={props.handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className=\"w-10/12\" sx={style} component=\"form\" noValidate>\r\n          <TextField\r\n            id=\"outlined-claim-title-input\"\r\n            className=\"w-3/4\"\r\n            label={\"Claim Title\"}\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            id=\"outlined-submitter-input\"\r\n            className=\"w-3/4\"\r\n            label=\"Claimer Name / Handle\"\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            id=\"outlined-claimerAddress-input\"\r\n            className=\"w-3/4\"\r\n            label=\"Claimer Address\"\r\n            type=\"text\"\r\n            variant=\"standard\"\r\n            value={props.txtra.address}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n          />\r\n\r\n          {/* read only section */}\r\n          <TextField\r\n            id=\"projectID-read-only-input\"\r\n            label=\"Project ID\"\r\n            className=\"w-3/4\"\r\n            value={\"Designated Project ID\"}\r\n            InputProps={{\r\n              readOnly: true,\r\n            }}\r\n            variant=\"standard\"\r\n          />\r\n          {/* Contract address dropdown selection here - NEED TO CONNECT TO EXISTING CONTRACT ADDRESSES TO SEE THE OPTIONS */}\r\n          <FormControl className=\"w-3/4\">\r\n            <InputLabel id=\"demo-simple-select-label\">\r\n              Contract Address\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-label\"\r\n              id=\"demo-simple-select\"\r\n              label=\"Contract Reference - select\"\r\n              onChange={handleSelectChange}\r\n            >\r\n              <MenuItem value={regContract?.[0].address}>\r\n                {/* THIS LINKS TO THE CONTRACT REF NUMBER. THIS NEEDS REFACTORING & PROPER LINKING */}\r\n                {regContract?.[0].address.slice(0, 5) +\r\n                  \"-\" +\r\n                  regContract?.[0].name}\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {/* Text to be encrypted  - SOMEONE NEEDS TO ENCRYPT THE TEXTS ON SUBMIT*/}\r\n          <TextField\r\n            id=\"outlined-claimDetails-input\"\r\n            className=\"w-3/4\"\r\n            label=\"Claim Details\"\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            multiline\r\n          />\r\n          <Button variant=\"outlined\"\r\n            style={{ marginTop: 8 }}\r\n            onClick={async () => {\r\n              // function registerClaim( uint256 _projectId, uint256 _contractId, address _contractAddress, string memory _metaData)\r\n              let __contractId = 1; // TODO\r\n              let __contractAddress = '0xBd696eA529180b32e8c67F1888ed51Ac071cb56F';\r\n              let metaData = 'claim X reason Y extra Z';\r\n              const result = props.txtra.tx(props.txtra.writeContracts.ClaimsRegistry.registerClaim(props.rowProps.id, __contractId, __contractAddress, metaData), update => {\r\n                console.log(\"📡 Transaction Update:\", update);\r\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\r\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\r\n                  console.log(\r\n                    \" ⛽️ \" +\r\n                      update.gasUsed +\r\n                      \"/\" +\r\n                      (update.gasLimit || update.gas) +\r\n                      \" @ \" +\r\n                      parseFloat(update.gasPrice) / 1000000000 +\r\n                      \" gwei\",\r\n                  );\r\n                }\r\n              });\r\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\r\n              console.log(await result);\r\n            }}\r\n          >\r\n            Make Claim!\r\n          </Button>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport { useState } from \"react\";\r\nimport { Button } from \"@mui/material\";\r\nimport FormModalClaims from \"./FormModalClaims\";\r\n\r\nexport default function CreateClaims(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  // eslint-disable-next-line prettier/prettier\r\n  const handleClose = () => setOpen(false);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        className=\"bg-blue-500 text-white hover:bg-blue-400 w-24\"\r\n        onClick={handleOpen}\r\n      >\r\n        Make Claim\r\n      </Button>\r\n      <FormModalClaims\r\n        open={open}\r\n        handleClose={handleClose}\r\n        createClaims={true}\r\n        name=\"Submit\"\r\n        rowProps={props.rowProps.row}\r\n        txtra={props.rowProps.txtra}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport { Modal, Box, TextField, Button } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  gap: \"20px\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  height: \"auto\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: \"2px 2px 24px black\",\r\n  borderRadius: \"10px\",\r\n  p: 3,\r\n  maxWidth: \"850px\",\r\n};\r\n\r\nexport default function FormModalContract(props) {\r\n  const [contractAddress, setContractAddress] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const checkContractAddressDigit = (e) => {\r\n    e.preventDefault();\r\n    setContractAddress(e.target.value);\r\n  };\r\n\r\n  const handleName = (e) => {\r\n    e.preventDefault();\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        open={props.open}\r\n        onClose={props.handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box className=\"w-10/12\" sx={style} component=\"form\" noValidate>\r\n          {/* THIS NEEDS TO BE CONNECTED TO THE WALLET!!!!!!!!!!!!!!!!! */}\r\n          {contractAddress.length > 25 ? (\r\n            <TextField\r\n              className=\"w-3/4\"\r\n              label=\"Contract Address\"\r\n              type=\"text\"\r\n              variant=\"outlined\"\r\n              value={contractAddress}\r\n              onChange={checkContractAddressDigit}\r\n            />\r\n          ) : (\r\n            <TextField\r\n              color=\"secondary\"\r\n              helperText=\"Please ensure your address is correct before submission\"\r\n              className=\"w-3/4\"\r\n              label=\"Contract Address\"\r\n              value={contractAddress}\r\n              onChange={checkContractAddressDigit}\r\n            />\r\n          )}\r\n          <TextField\r\n            className=\"w-3/4\"\r\n            label=\"Name\"\r\n            type=\"text\"\r\n            value={name}\r\n            variant=\"outlined\"\r\n            onChange={handleName}\r\n          />\r\n          {/* THE BUTTON NEEDS TO BE CONNECTED TO THE \"CONTRACTS\" TABLE UNDER \"PROJECTS\". REFER TO \"RegisterContract.jsx\" under COMPONENTS */}\r\n          <Button onClick={handleSubmit}>Submit</Button>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport { useState } from \"react\";\r\nimport FormModalContract from \"./FormModalContract\";\r\nimport { Container, Button } from \"@mui/material\";\r\n\r\nexport default function RegisterContract() {\r\n  const [open, setOpen] = useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  return (\r\n    <Container className=\"flex h-20 justify-end items-center ctaButtons\">\r\n      <Button\r\n        className=\"bg-blue-700 text-white hover:bg-blue-400 w-52\"\r\n        onClick={handleOpen}\r\n      >\r\n        Register Contract\r\n      </Button>\r\n      <FormModalContract\r\n        open={open}\r\n        handleOpen={handleOpen}\r\n        handleClose={handleClose}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Collapse from \"@mui/material/Collapse\";\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport AddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\r\nimport RemoveCircleOutlineIcon from \"@mui/icons-material/RemoveCircleOutline\";\r\nimport \"./CollapsibleTable.css\";\r\nimport CreateClaims from \"./CreateClaims\";\r\nimport RegisterContract from \"./RegisterContract\";\r\nimport {\r\n  useContractReader,\r\n} from \"eth-hooks\";\r\nconst { ethers } = require(\"ethers\");\r\n\r\n\r\nfunction createData(sort, name, expand, funds) {\r\n  return {\r\n    sort,\r\n    name,\r\n    expand,\r\n    funds,\r\n    history: [\r\n      {\r\n        claim: `A Bug in ${0x12345}`,\r\n        insuranceDeposit: [\r\n          `${500} AUDN from ${0x12345578}`,\r\n          `Description: Project DAO ensures up to ${500} AUDN in the case of ...`,\r\n        ],\r\n        insuranceClaim: `${200} AUDN from ${0x7890}`,\r\n      },\r\n      {\r\n        claim: `A Bug in ${0x78911}`,\r\n        insuranceDeposit: [\r\n          `${400} AUDN from ${0x1234aaddb}`,\r\n          `Description: Project DAO ensures up to ${400} AUDN in the case of ...`,\r\n        ],\r\n        insuranceClaim: `${200} AUDN from ${0xddf500}`,\r\n      },\r\n    ],\r\n    // NEEDS TO BE LINKED TO THE CONTRACT DETAILS FROM THE REGISTER CONTRACT FORM\r\n    registerContract: [\r\n      {\r\n        address: `${\"0x7822000sdfadadkgjadlkjadal\"}`,\r\n        name: `${\"ERC20\"}`,\r\n      },\r\n      {\r\n        address: `${\"0x78399000sdfadadkgjadlkjadal\"}`,\r\n        name: `${\"ERC\"}`,\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\nfunction ProjectRow(props) {\r\n  const id = props.id;\r\n  const projectInfo = useContractReader(props.props.props.readContracts, \"ProjectRegistry\", \"getProjectInfo\", [id]);\r\n  const projectClaims = useContractReader(props.props.props.readContracts, \"ClaimsRegistry\", \"getClaims\", [id]);\r\n  const projectDeposits = useContractReader(props.props.props.readContracts, \"ProjectRegistry\", \"getDeposits\", [id]);\r\n  console.log(projectClaims);\r\n  console.log(projectDeposits);\r\n  if (!projectInfo) return null;\r\n  const row = createData(id, projectInfo[0], true, 50001);\r\n  row.projectInfo = projectInfo;\r\n  row.projectClaims = projectClaims ? projectClaims : [];\r\n  row.projectDeposits = projectDeposits ? projectDeposits : [];\r\n  row.id = id;\r\n  const txtra = {\r\n    address: props.props.props.address,\r\n    tx: props.props.props.tx,\r\n    writeContracts: props.props.props.writeContracts\r\n  };\r\n\r\n  return (<Row key={id} row={row} txtra={txtra} />);\r\n}\r\n\r\nfunction Row(props) {\r\n  const { row } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n  console.log(props);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow sx={{ \"& > *\": { borderBottom: \"unset\" } }}>\r\n        <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n          {row.id}\r\n        </TableCell>\r\n        <TableCell align=\"left\">{row.projectInfo ? row.projectInfo[0] : '...'}</TableCell>\r\n        <TableCell align=\"center\">\r\n          <IconButton\r\n            aria-label=\"expand row\"\r\n            size=\"small\"\r\n            onClick={() => setOpen(!open)}\r\n            className=\"w-8\"\r\n          >\r\n            {open ? <RemoveCircleOutlineIcon /> : <AddCircleOutlineIcon />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell align=\"left\">{row.funds} AUDN</TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        {/* this is where the collapsible contract registry data are structured */}\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box sx={{ margin: 1 }}>\r\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                Contracts\r\n              </Typography>\r\n              <Table size=\"small\" aria-label=\"purchases\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Reference No.</TableCell>\r\n                    <TableCell>Address</TableCell>\r\n                    <TableCell>Name</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {row.registerContract.map((contractRow) => (\r\n                    <TableRow key={contractRow.address}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {/* Contract Register Reference number PLEASE CHANGE AS YOU REQUIRE */}\r\n                        {contractRow.address.slice(0, 5)}-{contractRow.name}\r\n                      </TableCell>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {contractRow.address}\r\n                      </TableCell>\r\n                      <TableCell>{contractRow.name}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n              <RegisterContract />\r\n            </Box>\r\n\r\n            {/* this is where the collapsible transaction history data are structured */}\r\n            <Box sx={{ margin: 1 }}>\r\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                Transaction History - Deposits &amp; Claims\r\n              </Typography>\r\n              <Table size=\"small\" aria-label=\"purchases\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Deposit ID</TableCell>\r\n                    <TableCell>Amount</TableCell>\r\n                    <TableCell>Claimed</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {row.projectDeposits.map((deposit) => (\r\n                    <TableRow key={deposit.depositId}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {deposit.depositId.toString()}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {ethers.utils.formatEther(deposit.amount)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {ethers.utils.formatEther(deposit.claimedAmount)}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n              <Container className=\"flex h-20 gap-4 justify-end items-center ctaButtons\">\r\n                <Button className=\"bg-blue-500 text-white hover:bg-blue-400 w-24\">\r\n                  Deposit\r\n                </Button>\r\n              </Container>\r\n              <Table size=\"small\" aria-label=\"purchases\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Claim</TableCell>\r\n                    <TableCell>Insurance Deposit</TableCell>\r\n                    <TableCell>Insurance Claim</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {row.projectClaims.map((claim) => (\r\n                    <TableRow key={claim.claimId}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        Claim[{claim.claimId.toString()}]<br/>\r\n                        Contract#{claim.contractId.toString()}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {claim.metaData}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {claim.depositAmount.toString()} AUDN\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                  {row.history.map((historyRow) => (\r\n                    <TableRow key={historyRow.claim}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {historyRow.claim}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {historyRow.insuranceDeposit[0]}\r\n                        <br></br>\r\n                        {historyRow.insuranceDeposit[1]}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {historyRow.insuranceClaim}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n              <Container className=\"flex h-20 gap-4 justify-end items-center ctaButtons\">\r\n                <CreateClaims rowProps={props} />\r\n              </Container>\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n//this is where the table data types are set\r\nRow.propTypes = {\r\n  row: PropTypes.shape({\r\n    sort: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    funds: PropTypes.number.isRequired,\r\n    history: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        claim: PropTypes.string.isRequired,\r\n        //insuranceDeposit: PropTypes.string.isRequired,\r\n        insuranceClaim: PropTypes.string.isRequired,\r\n      })\r\n    ).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\n// this is where the table data gets fed\r\nconst rows = [\r\n  createData(1, \"UST\", \"\", 5000),\r\n  createData(2, \"Maker DAO\", \"\", 2000),\r\n  createData(3, \"0x Audition\", \"\", 1500),\r\n];\r\n\r\n// this is where the actual table heading and the entire structure get set\r\nexport default function CollapsibleTable(props) {\r\n  if (!props.projectCount) return null;\r\n  const projectIds = [...Array(props.projectCount.toNumber())].map((_, i) => i + 1); // array of projectIds from 1\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"collapsible table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\">Sort</TableCell>\r\n            <TableCell align=\"left\">Name</TableCell>\r\n            <TableCell align=\"center\">Expand</TableCell>\r\n            <TableCell>Funds</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {projectIds.map((id) => (\r\n            <ProjectRow key={id} id={id} props={props} />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport { Button } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport FormModalRegister from \"./FormModalRegister\";\r\n\r\nexport default function RegisterProject({\r\n  props,\r\n  address,\r\n  mainnetProvider,\r\n  localProvider,\r\n  yourLocalBalance,\r\n  price,\r\n  tx,\r\n  readContracts,\r\n  writeContracts,\r\n}) {\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"contained\"\r\n        className=\"bg-blue-500 text-white hover:bg-blue-400 my-20\"\r\n        onClick={handleOpen}\r\n      >\r\n        Register A Project\r\n      </Button>\r\n      <FormModalRegister\r\n        open={open}\r\n        handleClose={handleClose}\r\n        registerProject={true}\r\n        tx={tx}\r\n        writeContracts={writeContracts}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport { AppBar, Toolbar, Typography, Container } from \"@mui/material\";\r\nimport CollapsibleTable from \"../components/CollapsibleTable\";\r\nimport RegisterProject from \"../components/RegisterProject\";\r\nimport {\r\n  useContractReader,\r\n} from \"eth-hooks\";\r\n\r\n\r\nfunction Projects(props) {\r\n  const projectCount = useContractReader(props.readContracts, \"ProjectRegistry\", \"getProjectCount\");\r\n\r\n  return (\r\n    <>\r\n      <AppBar className=\"shadow-none gradient-bg py-4 z-10\">\r\n        <Toolbar>\r\n          <Typography\r\n            variant=\"h4\"\r\n            noWrap\r\n            component=\"a\"\r\n            href=\"/\"\r\n            sx={{\r\n              mr: 2,\r\n              display: \"flex\",\r\n              letterSpacing: \"0.3rem\",\r\n              textDecoration: \"none\",\r\n              fontSize: { xs: \"1.2rem\", md: \"2rem\" },\r\n              color: \"#fff\",\r\n            }}\r\n          >\r\n            Audition\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* collapsible table section */}\r\n      <h2>debug: {projectCount ? projectCount.toString() : '...'} projects live</h2>\r\n      <Container maxWidth=\"md\" className=\"h-[100vh] mt-48\">\r\n        <Typography variant=\"h3\" className=\"font-bold text-gradient mb-8 project\">\r\n          Projects\r\n        </Typography>\r\n        <CollapsibleTable props={props} projectCount={projectCount} className=\"mb-20 shadow-md\" />\r\n        <RegisterProject {...props}/>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Projects;\r\n","/* eslint-disable prettier/prettier */\r\nimport { Button, Card, DatePicker, Divider, Input, Progress, Slider, Spin, Switch } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { utils } from \"ethers\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\n\r\nimport { Address, Balance, Events } from \"../components\";\r\n\r\nexport default function ExampleUI({\r\n  purpose,\r\n  address,\r\n  mainnetProvider,\r\n  localProvider,\r\n  yourLocalBalance,\r\n  price,\r\n  tx,\r\n  readContracts,\r\n  writeContracts,\r\n}) {\r\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\r\n\r\n  return (\r\n    <div>\r\n      {/*\r\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\r\n      */}\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\r\n        <h2>Example UI:</h2>\r\n        <h4>purpose: {purpose}</h4>\r\n        <Divider />\r\n        <div style={{ margin: 8 }}>\r\n          <Input\r\n            onChange={e => {\r\n              setNewPurpose(e.target.value);\r\n            }}\r\n          />\r\n          <Button\r\n            style={{ marginTop: 8 }}\r\n            onClick={async () => {\r\n              /* look how you call setPurpose on your contract: */\r\n              /* notice how you pass a call back for tx updates too */\r\n              const result = tx(writeContracts.YourContract.setPurpose(newPurpose), update => {\r\n                console.log(\"📡 Transaction Update:\", update);\r\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\r\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\r\n                  console.log(\r\n                    \" ⛽️ \" +\r\n                      update.gasUsed +\r\n                      \"/\" +\r\n                      (update.gasLimit || update.gas) +\r\n                      \" @ \" +\r\n                      parseFloat(update.gasPrice) / 1000000000 +\r\n                      \" gwei\",\r\n                  );\r\n                }\r\n              });\r\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\r\n              console.log(await result);\r\n            }}\r\n          >\r\n            Set Purpose!\r\n          </Button>\r\n        </div>\r\n        <Divider />\r\n        Your Address:\r\n        <Address address={address} ensProvider={mainnetProvider} fontSize={16} />\r\n        <Divider />\r\n        ENS Address Example:\r\n        <Address\r\n          address=\"0x34aA3F359A9D614239015126635CE7732c18fDF3\" /* this will show as austingriffith.eth */\r\n          ensProvider={mainnetProvider}\r\n          fontSize={16}\r\n        />\r\n        <Divider />\r\n        {/* use utils.formatEther to display a BigNumber: */}\r\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\r\n        <div>OR</div>\r\n        <Balance address={address} provider={localProvider} price={price} />\r\n        <Divider />\r\n        <div>🐳 Example Whale Balance:</div>\r\n        <Balance balance={utils.parseEther(\"1000\")} provider={localProvider} price={price} />\r\n        <Divider />\r\n        {/* use utils.formatEther to display a BigNumber: */}\r\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\r\n        <Divider />\r\n        Your Contract Address:\r\n        <Address\r\n          address={readContracts && readContracts.YourContract ? readContracts.YourContract.address : null}\r\n          ensProvider={mainnetProvider}\r\n          fontSize={16}\r\n        />\r\n        <Divider />\r\n        <div style={{ margin: 8 }}>\r\n          <Button\r\n            onClick={() => {\r\n              /* look how you call setPurpose on your contract: */\r\n              tx(writeContracts.YourContract.setPurpose(\"🍻 Cheers\"));\r\n            }}\r\n          >\r\n            Set Purpose to &quot;🍻 Cheers&quot;\r\n          </Button>\r\n        </div>\r\n        <div style={{ margin: 8 }}>\r\n          <Button\r\n            onClick={() => {\r\n              /*\r\n              you can also just craft a transaction and send it to the tx() transactor\r\n              here we are sending value straight to the contract's address:\r\n            */\r\n              tx({\r\n                to: writeContracts.YourContract.address,\r\n                value: utils.parseEther(\"0.001\"),\r\n              });\r\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\r\n            }}\r\n          >\r\n            Send Value\r\n          </Button>\r\n        </div>\r\n        <div style={{ margin: 8 }}>\r\n          <Button\r\n            onClick={() => {\r\n              /* look how we call setPurpose AND send some value along */\r\n              tx(\r\n                writeContracts.YourContract.setPurpose(\"💵 Paying for this one!\", {\r\n                  value: utils.parseEther(\"0.001\"),\r\n                }),\r\n              );\r\n              /* this will fail until you make the setPurpose function payable */\r\n            }}\r\n          >\r\n            Set Purpose With Value\r\n          </Button>\r\n        </div>\r\n        <div style={{ margin: 8 }}>\r\n          <Button\r\n            onClick={() => {\r\n              /* you can also just craft a transaction and send it to the tx() transactor */\r\n              tx({\r\n                to: writeContracts.YourContract.address,\r\n                value: utils.parseEther(\"0.001\"),\r\n                data: writeContracts.YourContract.interface.encodeFunctionData(\"setPurpose(string)\", [\r\n                  \"🤓 Whoa so 1337!\",\r\n                ]),\r\n              });\r\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\r\n            }}\r\n          >\r\n            Another Example\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/*\r\n        📑 Maybe display a list of events?\r\n          (uncomment the event and emit line in YourContract.sol! )\r\n      */}\r\n      <Events\r\n        contracts={readContracts}\r\n        contractName=\"YourContract\"\r\n        eventName=\"SetPurpose\"\r\n        localProvider={localProvider}\r\n        mainnetProvider={mainnetProvider}\r\n        startBlock={1}\r\n      />\r\n\r\n      <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 256 }}>\r\n        <Card>\r\n          Check out all the{\" \"}\r\n          <a\r\n            href=\"https://github.com/austintgriffith/scaffold-eth/tree/master/packages/react-app/src/components\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            📦 components\r\n          </a>\r\n        </Card>\r\n\r\n        <Card style={{ marginTop: 32 }}>\r\n          <div>\r\n            There are tons of generic components included from{\" \"}\r\n            <a href=\"https://ant.design/components/overview/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              🐜 ant.design\r\n            </a>{\" \"}\r\n            too!\r\n          </div>\r\n\r\n          <div style={{ marginTop: 8 }}>\r\n            <Button type=\"primary\">Buttons</Button>\r\n          </div>\r\n\r\n          <div style={{ marginTop: 8 }}>\r\n            <SyncOutlined spin /> Icons\r\n          </div>\r\n\r\n          <div style={{ marginTop: 8 }}>\r\n            Date Pickers?\r\n            <div style={{ marginTop: 2 }}>\r\n              <DatePicker onChange={() => {}} />\r\n            </div>\r\n          </div>\r\n\r\n          <div style={{ marginTop: 32 }}>\r\n            <Slider range defaultValue={[20, 50]} onChange={() => {}} />\r\n          </div>\r\n\r\n          <div style={{ marginTop: 32 }}>\r\n            <Switch defaultChecked onChange={() => {}} />\r\n          </div>\r\n\r\n          <div style={{ marginTop: 32 }}>\r\n            <Progress percent={50} status=\"active\" />\r\n          </div>\r\n\r\n          <div style={{ marginTop: 32 }}>\r\n            <Spin />\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport { Select } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { utils } from \"ethers\";\r\n\r\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\r\nimport { Address, AddressInput } from \"../components\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\r\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\r\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\r\n  const listOfTokens = useTokenList(\r\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>👷</span>\r\n        Edit your <b>contract</b> in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat/contracts\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🛰</span>\r\n        <b>compile/deploy</b> with\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run deploy\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚀</span>\r\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/react-app/src/contracts/\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🎛</span>\r\n        Edit your <b>frontend</b> in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/reactapp/src/App.js\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🔭</span>\r\n        explore the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{\r\n            marginLeft: 4,\r\n            marginRight: 4,\r\n            /* backgroundColor: \"#f9f9f9\", */\r\n            padding: 4,\r\n            borderRadius: 4,\r\n            fontWeight: \"bolder\",\r\n          }}\r\n        >\r\n          🖇 hooks\r\n        </span>\r\n        and\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          📦 components\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        for example, the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          useBalance()\r\n        </span>{\" \"}\r\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\r\n      </div>\r\n\r\n      <div style={{ margin: 8 }}>\r\n        <div>\r\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\r\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            tokenlists.org!\r\n          </a>\r\n        </div>\r\n        <Select\r\n          showSearch\r\n          value={selectedToken}\r\n          onChange={value => {\r\n            console.log(`selected ${value}`);\r\n            setSelectedToken(value);\r\n          }}\r\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n          optionFilterProp=\"children\"\r\n        >\r\n          {listOfTokens.map(token => (\r\n            <Option key={token.address + \"_\" + token.symbol} value={token.symbol}>\r\n              {token.symbol}\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        as you build your app you&apos;ll need web3 specific components like an\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          {\"<AddressInput/>\"}\r\n        </span>\r\n        component:\r\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\r\n          <AddressInput ensProvider={mainnetProvider} />\r\n        </div>\r\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        this balance could be multiplied by\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          price\r\n        </span>{\" \"}\r\n        that is loaded with the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          usePrice\r\n        </span>{\" \"}\r\n        hook with the current value: <b>${price}</b>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>💧</span>\r\n        use the <b>faucet</b> to send funds to\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          <Address address={address} minimized /> {address}\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📡</span>\r\n        deploy to a testnet or mainnet by editing\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat/hardhat.config.js\r\n        </span>\r\n        and running\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run deploy\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🔑</span>\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run generate\r\n        </span>\r\n        will create a deployer account in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat\r\n        </span>\r\n        <div style={{ marginTop: 8 }}>\r\n          (use{\" \"}\r\n          <span\r\n            className=\"highlight\"\r\n            style={{\r\n              marginLeft: 4,\r\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\r\n              borderRadius: 4,\r\n              fontWeight: \"bolder\",\r\n            }}\r\n          >\r\n            yarn run account\r\n          </span>{\" \"}\r\n          to display deployer address and balance)\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>⚙️</span>\r\n        build your app with\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run build\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚢</span>\r\n        ship it!\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run surge\r\n        </span>\r\n        or\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run s3\r\n        </span>\r\n        or\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run ipfs\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>💬</span>\r\n        for support, join this\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\r\n            Telegram Chat\r\n          </a>\r\n        </span>\r\n      </div>\r\n      <div style={{ padding: 128 }}>\r\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { Button, Input, Table, Typography } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport GraphiQL from \"graphiql\";\r\nimport \"graphiql/graphiql.min.css\";\r\nimport fetch from \"isomorphic-fetch\";\r\nimport React, { useState } from \"react\";\r\nimport { Address } from \"../components\";\r\n\r\nconst highlight = {\r\n  marginLeft: 4,\r\n  marginRight: 8,\r\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\r\n  borderRadius: 4,\r\n  fontWeight: \"bolder\",\r\n};\r\n\r\nfunction Subgraph(props) {\r\n  function graphQLFetcher(graphQLParams) {\r\n    return fetch(props.subgraphUri, {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(graphQLParams),\r\n    }).then(response => response.json());\r\n  }\r\n\r\n  const EXAMPLE_GRAPHQL = `\r\n  {\r\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\r\n      id\r\n      purpose\r\n      createdAt\r\n      sender {\r\n        id\r\n      }\r\n    }\r\n    senders {\r\n      id\r\n      address\r\n      purposeCount\r\n    }\r\n  }\r\n  `;\r\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\r\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\r\n\r\n  const purposeColumns = [\r\n    {\r\n      title: \"Purpose\",\r\n      dataIndex: \"purpose\",\r\n      key: \"purpose\",\r\n    },\r\n    {\r\n      title: \"Sender\",\r\n      key: \"id\",\r\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\r\n    },\r\n    {\r\n      title: \"createdAt\",\r\n      key: \"createdAt\",\r\n      dataIndex: \"createdAt\",\r\n      render: d => new Date(d * 1000).toISOString(),\r\n    },\r\n  ];\r\n\r\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\r\n\r\n  const deployWarning = (\r\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        You will find that parsing/tracking events with the{\" \"}\r\n        <span className=\"highlight\" style={highlight}>\r\n          useEventListener\r\n        </span>{\" \"}\r\n        hook becomes a chore for every new project.\r\n      </div>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        Instead, you can use{\" \"}\r\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          The Graph\r\n        </a>{\" \"}\r\n        with 🏗 scaffold-eth (\r\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          learn more\r\n        </a>\r\n        ):\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>⛓️</span>\r\n        Make sure your local chain is running first:\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn chain\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚮</span>\r\n        Clean up previous data, if there is any:\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn clean-graph-node\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📡</span>\r\n        Spin up a local graph node by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn run-graph-node\r\n        </span>\r\n        <span style={{ marginLeft: 4 }}>\r\n          {\" \"}\r\n          (requires{\" \"}\r\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {\" \"}\r\n            Docker\r\n          </a>\r\n          ){\" \"}\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📝</span>\r\n        Create your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-create-local\r\n        </span>\r\n        (only required once!)\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚢</span>\r\n        Deploy your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-ship-local\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🖍️</span>\r\n        Edit your <b>local subgraph</b> in\r\n        <span className=\"highlight\" style={highlight}>\r\n          packages/subgraph/src\r\n        </span>\r\n        (learn more about subgraph definition{\" \"}\r\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          here\r\n        </a>\r\n        )\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🤩</span>\r\n        Deploy your <b>contracts and your subgraph</b> in one go by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn deploy-and-graph\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\r\n        <div style={{ margin: 32, textAlign: \"right\" }}>\r\n          <Input\r\n            onChange={e => {\r\n              setNewPurpose(e.target.value);\r\n            }}\r\n          />\r\n          <Button\r\n            onClick={() => {\r\n              console.log(\"newPurpose\", newPurpose);\r\n              /* look how you call setPurpose on your contract: */\r\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\r\n            }}\r\n          >\r\n            Set Purpose\r\n          </Button>\r\n        </div>\r\n\r\n        {data ? (\r\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\r\n        ) : (\r\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\r\n        )}\r\n\r\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\r\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ padding: 64 }}>...</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Subgraph;\r\n","/* eslint-disable prettier/prettier */\nimport { Button, Col, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Route, Switch, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  NetworkDisplay,\n  FaucetHint,\n  NetworkSwitch,\n} from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, ExampleUI, Subgraph, Projects } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\nimport RegisterProject from \"./components/RegisterProject\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.rinkeby; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"rinkeby\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const location = useLocation();\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n  const mainnetProvider = useStaticJsonRPC(providers);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // 🛰 providers\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  // useOnBlock(mainnetProvider, () => {\n  //   console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  // });\n\n  // Then read your DAI balance like:\n  // const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n  //   \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  // ]);\n  const myMainnetDAIBalance = 0;\n\n  // keep track of a variable from the contract in the local React state:\n  // const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n  const purpose = '';\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    localChainId,\n    myMainnetDAIBalance,\n  ]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header>\n        {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n        <div style={{ position: \"relative\", display: \"flex\", flexDirection: \"column\" }}>\n          <div style={{ display: \"flex\", flex: 1 }}>\n            {USE_NETWORK_SELECTOR && (\n              <div style={{ marginRight: 20 }}>\n                <NetworkSwitch\n                  networkOptions={networkOptions}\n                  selectedNetwork={selectedNetwork}\n                  setSelectedNetwork={setSelectedNetwork}\n                />\n              </div>\n            )}\n            <Account\n              useBurner={USE_BURNER_WALLET}\n              address={address}\n              localProvider={localProvider}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              price={price}\n              web3Modal={web3Modal}\n              loadWeb3Modal={loadWeb3Modal}\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\n              blockExplorer={blockExplorer}\n            />\n          </div>\n        </div>\n      </Header>\n      {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\n        <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\n      )}\n      <NetworkDisplay\n        NETWORKCHECK={NETWORKCHECK}\n        localChainId={localChainId}\n        selectedChainId={selectedChainId}\n        targetNetwork={targetNetwork}\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n      />\n      {/* <Menu style={{ textAlign: \"center\", marginTop: 20 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\n        <Menu.Item key=\"/\">\n          <Link to=\"/\">App Home</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/debug\">\n          <Link to=\"/debug\">Debug Contracts</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/hints\">\n          <Link to=\"/hints\">Hints</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/exampleui\">\n          <Link to=\"/exampleui\">ExampleUI</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/mainnetdai\">\n          <Link to=\"/mainnetdai\">Mainnet DAI</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/subgraph\">\n          <Link to=\"/subgraph\">Subgraph</Link>\n        </Menu.Item>\n      </Menu> */}\n\n      <Switch>\n        <Route exact path=\"/\">\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\n          <Home \n          address={address}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          localProvider={localProvider}\n          yourLocalBalance={yourLocalBalance}\n          price={price}\n          tx={tx}\n          writeContracts={writeContracts}\n          readContracts={readContracts}\n           />\n        </Route>\n        <Route exact path=\"/debug\">\n          {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n          <Contract\n            name=\"AudnGovernor\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n          <Contract\n            name=\"ClaimsRegistry\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n          <Contract\n            name=\"ProjectRegistry\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n          <Contract\n            name=\"AudnToken\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n        </Route>\n        <Route path=\"/projects\">\n          <Projects  \n          address={address}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          localProvider={localProvider}\n          yourLocalBalance={yourLocalBalance}\n          price={price}\n          tx={tx}\n          writeContracts={writeContracts}\n          readContracts={readContracts}/>\n        </Route>\n        <Route path=\"/projects/registerproject\">\n          <RegisterProject \n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n           />\n        </Route>\n        <Route path=\"/exampleui\">\n          <ExampleUI\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n            purpose={purpose}\n          />\n        </Route>\n        <Route path=\"/mainnetdai\">\n          <Contract\n            name=\"DAI\"\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n            signer={userSigner}\n            provider={mainnetProvider}\n            address={address}\n            blockExplorer=\"https://etherscan.io/\"\n            contractConfig={contractConfig}\n            chainId={1}\n          />\n          {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}\n        </Route>\n        <Route path=\"/subgraph\">\n          <Subgraph\n            subgraphUri={props.subgraphUri}\n            tx={tx}\n            writeContracts={writeContracts}\n            mainnetProvider={mainnetProvider}\n          />\n        </Route>\n      </Switch>\n\n      <ThemeSwitch />\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        {/* <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row> */}\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { StyledEngineProvider } from \"@mui/material\";\r\nimport \"./index.css\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <StyledEngineProvider injectFirst>\r\n    <ApolloProvider client={client}>\r\n      <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\r\n        <HashRouter>\r\n          <App subgraphUri={subgraphUri} />\r\n        </HashRouter>\r\n      </ThemeSwitcherProvider>\r\n    </ApolloProvider>\r\n  </StyledEngineProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","const ERC20ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        name: \"balance\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    payable: true,\r\n    stateMutability: \"payable\",\r\n    type: \"fallback\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n];\r\nconst DAIABI = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"chainId_\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: true,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes4\",\r\n        name: \"sig\",\r\n        type: \"bytes4\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg1\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg2\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"bytes\",\r\n        name: \"data\",\r\n        type: \"bytes\",\r\n      },\r\n    ],\r\n    name: \"LogNote\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"DOMAIN_SEPARATOR\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"PERMIT_TYPEHASH\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"burn\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"deny\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"mint\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"move\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"nonces\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"holder\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"nonce\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"expiry\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"allowed\",\r\n        type: \"bool\",\r\n      },\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"v\",\r\n        type: \"uint8\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"r\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"s\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    name: \"permit\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"pull\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"push\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"rely\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"version\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"wards\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\r\nmodule.exports = {\r\n  1: {\r\n    contracts: {\r\n      DAI: {\r\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n        abi: DAIABI,\r\n      },\r\n      UNI: {\r\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\r\n        abi: ERC20ABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n"],"sourceRoot":""}